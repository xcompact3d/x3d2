workflow:
  rules:
    # Run pipeline on tags for the main project
    - if: $CI_COMMIT_TAG && $CI_PROJECT_PATH == "xcompact3d/x3d2"
    # Run pipeline on the default branch for the main project
    - if: $CI_COMMIT_BRANCH == "main" && $CI_PROJECT_PATH == "xcompact3d/x3d2"
    # Rune pipeline on pull requests
    - if: $CI_PIPELINE_SOURCE == "external_pull_request_event"
      changes:
        compare_to: 'refs/heads/main'
        paths:
          - "src/**/*"
          - "examples/**/*"
          - "tests/**/*"
          - .gitlab-ci.yml

stages:
  - build-and-test
  - check-policies

.build-and-test-template: &build-and-test-template
  image: ubuntu:22.04
  stage: build-and-test
  timeout: 1h
  script:
    - echo "Setup environment"
    - apt update
    - apt install -y environment-modules
    - echo "/apps/modules" >> /etc/environment-modules/modulespath
    - apt-get update
    - apt-get install -y ccache
    - apt-get install -y cmake
    - apt-get install -y gcc
    - apt-get install -y git
    - apt-get install -y infiniband-diags ibverbs-utils
    - apt-get install -y libibverbs-dev libfabric1 libfabric-dev libpsm2-dev
    - apt-get install -y openmpi-bin openmpi-common libopenmpi-dev libgtk2.0-dev
    - apt-get install -y librdmacm-dev libpsm2-dev
    - . /etc/profile.d/modules.sh
    - ccache -s && ccache -M 5G
    - if [ "${EXTRA_MODULE}" != "" ]; then module load ${EXTRA_MODULE}; fi
    - export OMPI_ALLOW_RUN_AS_ROOT=1
    - export OMPI_ALLOW_RUN_AS_ROOT_CONFIRM=1
    - echo "Configure Debug build"
    - FC=mpif90 cmake -S . -B build-debug -DCMAKE_BUILD_TYPE=Debug -DWITH_ADIOS2=ON -DUSE_SYSTEM_ADIOS2=ON -DSINGLE_PREC=${SINGLE_PREC}
    - echo "Build tests"
    - make -C build-debug
    - echo "Run the tests"
    - if [ "${RUN_TEST}" == "ON" ]; then make -C build-debug test; fi
    - echo "Configure Release build"
    - FC=mpif90 cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DWITH_ADIOS2=ON -DUSE_SYSTEM_ADIOS2=ON -DSINGLE_PREC=${SINGLE_PREC}
    - echo "Build tests"
    - make -C build
    - echo "Run the tests"
    - if [ "${RUN_TEST}" == "ON" ]; then make -C build test; fi
  tags:
    - gpu

.check-formatting-template: &check-formatting-template
  image: python:3.9.19-bullseye
  stage: check-policies
  variables:
    FPRETTIFY_COMMAND: fprettify --config .fprettify.ini --diff --recursive src
  before_script:
    - pip install fprettify
  script:
    - cd $CI_PROJECT_DIR
    - $FPRETTIFY_COMMAND &> fprettify.log
    - if [[ ! -z "$(cat fprettify.log)" ]]; then echo "::warning::Code formatting issues detected. See log for details."; exit 1; fi
  allow_failure: false
  timeout: 15m
  artifacts:
    expire_in: 1 month
    when: on_failure
    paths:
      - fprettify.log

build-and-test:
  <<: *build-and-test-template
  needs: []
  variables:
    ADIOS2_VERSION: 2.10.2
    EXTRA_MODULE: "adios2"
    SINGLE_PREC: "OFF"
    RUN_TEST: "ON"

build-and-test-single-prec:
  <<: *build-and-test-template
  needs: []
  variables:
    ADIOS2_VERSION: 2.10.2
    EXTRA_MODULE: "adios2"
    SINGLE_PREC: "ON"
    RUN_TEST: "OFF"

build-and-test-cuda:
  <<: *build-and-test-template
  needs: []
  variables:
    ADIOS2_VERSION: 2.10.2
    EXTRA_MODULE: "adios2-nvfortran"
    SINGLE_PREC: "OFF"
    RUN_TEST: "ON"

build-and-test-cuda-single-prec:
  <<: *build-and-test-template
  needs: []
  variables:
    ADIOS2_VERSION: 2.10.2
    EXTRA_MODULE: "adios2-nvfortran"
    SINGLE_PREC: "ON"
    RUN_TEST: "OFF"
    
check-formatting:
  <<: *check-formatting-template
  needs: []
